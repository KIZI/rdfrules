{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$defs": {
    "baseObject": {
      "type": "object",
      "unevaluatedProperties": false
    },
    "graphPath": {
      "title": "Choose a file from the workspace",
      "description": "Load a file from the workspace on the server side. The dataset format is detected automatically by the file extension. Supported extensions are .ttl (turtle), .nt (n-triples), .nq (n-quads), .json | .jsonld (JSON-LD), .xml | .rdf | .owl (RDF/XML), .trig (TriG), .trix (TriX), .tsv, .sql, .cache (internal binary format). All formats can be compressed by GZIP or BZ2 (e.g. data.ttl.gz).",
      "type": "string",
      "pattern": "^.+[.](ttl|nt|nq|json|jsonld|xml|rdf|owl|trig|trix|tsv|sql|cache)([.](gz|bz2))?$"
    },
    "prefixesPath": {
      "title": "Choose a file from the workspace",
      "description": "It is possible to load a file with prefixes in the Turtle (.ttl) format from the workspace on the server side.",
      "type": "string",
      "pattern": "^.+[.]ttl$"
    },
    "prefixesUrl": {
      "title": "URL",
      "description": "A URL to a remote file to be loaded. If this is specified then the workspace file is ommited.",
      "type": "string",
      "format": "uri"
    },
    "indexPath": {
      "title": "Choose a file from the workspace",
      "description": "You can load a serialized index file from the workspace on the server side (just click onto a file name).",
      "type": "string"
    },
    "rulesetPath": {
      "title": "Choose a file from the workspace",
      "description": "You can load a serialized ruleset file from the workspace on the server side (just click onto a file name).",
      "type": "string"
    },
    "predictionPath": {
      "title": "Choose a file from the workspace",
      "description": "You can load a serialized prediction file from the workspace on the server side (just click onto a file name).",
      "type": "string"
    },
    "graphUrl": {
      "title": "URL",
      "description": "A URL to a remote file to be loaded. If this is specified then the workspace file is ommited.",
      "type": "string",
      "format": "uri"
    },
    "graphName": {
      "title": "Graph name",
      "description": "Name for this loaded graph. It must have the URI notation in angle brackets, e.g., <dbpedia> or `<http://dbpedia.org>`.",
      "type": "string",
      "pattern": "^<.*>$"
    },
    "sourceSettings": {
      "title": "TSV parser",
      "description": "If you choose a tsv source file, you should select a mode of parsing (raw - everything is uri, parsedUris - try to distinguish between URIs and constants, parsedLiterals - constants are formated to string, numbers, intervals, boolean)",
      "enum": [
        "tsvRaw",
        "tsvParsedUris",
        "tsvParsedLiterals"
      ]
    },
    "rulesFormat": {
      "title": "Rules format",
      "description": "The ruleset format.",
      "type": "array",
      "items": {
        "type": "string",
        "enum": [
          "ndjson",
          "json",
          "cache"
        ]
      }
    },
    "predictionsFormat": {
      "title": "Prediction format",
      "description": "The prediction format.",
      "type": "array",
      "items": {
        "type": "string",
        "enum": [
          "ndjson",
          "json",
          "cache"
        ]
      }
    },
    "quadFilter": {
      "$ref": "#/$defs/baseObject",
      "properties": {
        "subject": {
          "type": "string"
        },
        "predicate": {
          "type": "string"
        },
        "object": {
          "type": "string"
        },
        "graph": {
          "type": "string"
        },
        "inverse": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "prefix": {
      "$ref": "#/$defs/baseObject",
      "title": "Hand-defined prefix",
      "properties": {
        "prefix": {
          "type": "string",
          "pattern": "[0-9a-zA-Z]\\w*"
        },
        "nameSpace": {
          "type": "string",
          "pattern": "\\S+[/#?=&]"
        }
      }
    },
    "LoadGraph": {
      "title": "Load graph",
      "description": "Load graph (set of triples) from a file in the workspace or from a remote file available via URL. The source is in some RDF or relational SQL format and is supposed as a single graph.",
      "$ref": "#/$defs/baseObject",
      "properties": {
        "name": {
          "const": "LoadGraph"
        },
        "parameters": {
          "$ref": "#/$defs/baseObject",
          "properties": {
            "path": {
              "$ref": "#/$defs/graphPath"
            },
            "url": {
              "$ref": "#/$defs/graphUrl"
            },
            "graphName": {
              "$ref": "#/$defs/graphName"
            },
            "settings": {
              "$ref": "#/$defs/sourceSettings"
            }
          }
        }
      },
      "x-source": null,
      "x-target": "dataset"
    },
    "LoadDataset": {
      "title": "Load dataset",
      "description": "Load dataset (set of quads) from a file in the workspace or from a remote file available via URL. The source is in some RDF or relational SQL format and can involve several graphs.",
      "$ref": "#/$defs/baseObject",
      "properties": {
        "name": {
          "const": "LoadDataset"
        },
        "parameters": {
          "$ref": "#/$defs/baseObject",
          "properties": {
            "path": {
              "$ref": "#/$defs/graphPath"
            },
            "url": {
              "$ref": "#/$defs/graphUrl"
            },
            "settings": {
              "$ref": "#/$defs/sourceSettings"
            }
          }
        }
      },
      "x-source": null,
      "x-target": "dataset"
    },
    "LoadIndex": {
      "title": "Load index",
      "description": "Load a serialized fact index from a file in the workspace.",
      "$ref": "#/$defs/baseObject",
      "properties": {
        "name": {
          "const": "LoadIndex"
        },
        "parameters": {
          "$ref": "#/$defs/baseObject",
          "properties": {
            "path": {
              "$ref": "#/$defs/indexPath"
            },
            "partially": {
              "type": "boolean",
              "description": "If the index is used only for mapping of triple items then the fact indices of triples are not loaded."
            }
          },
          "required": [
            "path",
            "partially"
          ]
        }
      },
      "x-source": null,
      "x-target": "index"
    },
    "LoadRulesetWithoutIndex": {
      "title": "Load ruleset",
      "description": "Load serialized ruleset from a file in the workspace without a fact index. No operations requiring a fact index are not permitted.",
      "$ref": "#/$defs/baseObject",
      "properties": {
        "name": {
          "const": "LoadRulesetWithoutIndex"
        },
        "parameters": {
          "$ref": "#/$defs/baseObject",
          "properties": {
            "path": {
              "$ref": "#/$defs/rulesetPath"
            },
            "format": {
              "$ref": "#/$defs/rulesFormat"
            },
            "parallelism": {
              "type": "integer"
            }
          },
          "required": [
            "path",
            "format"
          ]
        }
      },
      "x-source": null,
      "x-target": "ruleset"
    },
    "LoadPredictionWithoutIndex": {
      "title": "Load ruleset",
      "description": "Load serialized ruleset from a file in the workspace without a fact index. No operations requiring a fact index are not permitted.",
      "$ref": "#/$defs/baseObject",
      "properties": {
        "name": {
          "const": "LoadRulesetWithoutIndex"
        },
        "parameters": {
          "$ref": "#/$defs/baseObject",
          "properties": {
            "path": {
              "$ref": "#/$defs/predictionPath"
            },
            "format": {
              "$ref": "#/$defs/predictionsFormat"
            }
          },
          "required": [
            "path",
            "format"
          ]
        }
      },
      "x-source": null,
      "x-target": "prediction"
    },
    "FilterQuads": {
      "title": "Filter quads",
      "description": "Filter all quads by user-defined conditions.",
      "$ref": "#/$defs/baseObject",
      "properties": {
        "name": {
          "const": "FilterQuads"
        },
        "parameters": {
          "$ref": "#/$defs/baseObject",
          "properties": {
            "or": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/quadFilter"
              }
            }
          }
        }
      },
      "x-source": "dataset",
      "x-target": "dataset"
    },
    "AddPrefixes": {
      "title": "Add prefixes",
      "description": "Add prefixes to datasets to shorten URIs.",
      "$ref": "#/$defs/baseObject",
      "properties": {
        "name": {
          "const": "AddPrefixes"
        },
        "parameters": {
          "$ref": "#/$defs/baseObject",
          "properties": {
            "path": {
              "$ref": "#/$defs/prefixesPath"
            },
            "url": {
              "$ref": "#/$defs/prefixesUrl"
            },
            "prefixes": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/prefix"
              }
            }
          }
        }
      },
      "x-source": "dataset",
      "x-target": "dataset"
    },
    "CacheDataset": {
      "title": "Cache dataset",
      "description": "Cache the input dataset into memory or a file in the workspace at the server side for later use.",
      "$ref": "#/$defs/baseObject",
      "properties": {
        "name": {
          "const": "CacheDataset"
        },
        "parameters": {
          "$ref": "#/$defs/baseObject",
          "properties": {
            "inMemory": {
              "type": "boolean",
              "description": "Choose whether to save all previous transformations into memory or disk."
            },
            "path": {
              "type": "string",
              "description": "ID if in-memory is selected, or path to a workspace cache file which is saved on the disk."
            },
            "revalidate": {
              "type": "boolean"
            }
          },
          "required": ["inMemory", "path", "revalidate"]
        }
      },
      "x-source": "dataset",
      "x-target": "dataset"
    }
  },
  "type": "array",
  "items": {
    "anyOf": [
      {
        "$ref": "#/$defs/LoadGraph"
      },
      {
        "$ref": "#/$defs/LoadDataset"
      },
      {
        "$ref": "#/$defs/LoadIndex"
      },
      {
        "$ref": "#/$defs/LoadRulesetWithoutIndex"
      },
      {
        "$ref": "#/$defs/LoadPredictionWithoutIndex"
      },
      {
        "$ref": "#/$defs/FilterQuads"
      },
      {
        "$ref": "#/$defs/AddPrefixes"
      },
      {
        "$ref": "#/$defs/CacheDataset"
      }
    ]
  }
}